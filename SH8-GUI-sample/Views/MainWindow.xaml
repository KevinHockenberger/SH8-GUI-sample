<Window
  x:Class="SH8_Sample.MainWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Converters="clr-namespace:SH8_Sample.ViewModels.Converters"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:local="clr-namespace:SH8_Sample"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:vm="clr-namespace:SH8_Sample.ViewModels"
  Title="my MVVM template"
  Width="377"
  Height="359"
  d:DataContext="{d:DesignInstance vm:MainWindowViewModel}"
  FontSize="20"
  mc:Ignorable="d">
  <!--  if you want to assign datacontext in xaml only use the following  -->
  <!--<Window.DataContext>
    <vm:MainWindowViewModel />
  </Window.DataContext>-->
  <Window.Resources>
    <ResourceDictionary>
      <SolidColorBrush x:Key="myButtonColor" Color="#FFB7CAAD" />
      <Style TargetType="Button">
        <Style.Setters>
          <Setter Property="Background" Value="{StaticResource myButtonColor}" />
          <Setter Property="Foreground" Value="Black" />
        </Style.Setters>
      </Style>
      <Converters:BoolToBrushColorConverter x:Key="BoolToColorConverter" />
    </ResourceDictionary>

  </Window.Resources>
  <!--
    d:XXX attributes are for design-time data binding
    d:DataContext="{d:DesignInstance vm:MainWindowViewModel}"
    MAKE SURE ALL BINDING IS TO THE PUBLIC PROPERTY, NOT THE PRIVATE VARIABLE
  -->
  <DockPanel>
    <StackPanel DockPanel.Dock="Top">

      <!--  no clck event, instead bind to a command  -->
      <Button
        Margin="10"
        Command="{Binding DoSomethingCommand}"
        CommandParameter="Button"
        Content="click me" />

      <StackPanel Orientation="Horizontal">
        <Label Content="a string:" />
        <!--  content is set to a string property  -->
        <Label d:Content="ABC" Content="{Binding SomethingString}" />
      </StackPanel>

      <StackPanel Orientation="Horizontal">
        <Label Content="convert bool to color:" />
        <!--  must use a converter to convert a boolean to a visibility setting  -->
        <Label Background="{Binding IsSomethingBool, Converter={Converters:BoolToBrushColorConverter}}" Content="color" />
      </StackPanel>

      <StackPanel Orientation="Horizontal">
        <Label Content="convert bool to visible:" />
        <Label
          d:Visibility="Collapsed"
          Content="Hello World"
          Visibility="{Binding IsSomethingBool, Converter={StaticResource BoolToVis}}" />
        <Label Content="Goodbye World" Visibility="{Binding IsNotSomethingBool, Converter={StaticResource BoolToVis}}" />
      </StackPanel>

      <StackPanel Orientation="Horizontal">
        <Label Content="value from dictionary:" />
        <Label d:Content="zero" Content="{Binding Path=MyDictionaryValue}" />
      </StackPanel>
    </StackPanel>
    <StackPanel VerticalAlignment="Bottom" DockPanel.Dock="Bottom">
      <Label Content="{Binding MyString}" />
      <!--
        not binding to MyString (Text="{Binding MyString}") or else the button would not matter
        you could also use one-way binding (Text="{Binding MyString, Mode=OneWay}")
      -->
      <TextBox x:Name="txtMyString" d:Text="myString" />
      <!--  command with a parameter referencing a named textbox  -->
      <Button
        Margin="10"
        Command="{Binding DoSomethingWithStringCommand}"
        CommandParameter="{Binding Text, ElementName=txtMyString}"
        Content="param cmd, click me" />
    </StackPanel>
    <StackPanel />
  </DockPanel>
</Window>
